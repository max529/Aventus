import { ExampleData, MyExampleDataAction } from "../data/example.data.avt";
import { IData } from "../data/IData.data.avt";
import { Socket } from "../lib/Socket.lib.avt";
import { GenericRAMManager, RAMManager } from "./RAMManager.lib.avt";



export interface SocketRAMManagerRoutes {
    get: SocketRAMManagerRoute;
    getAll: SocketRAMManagerRoute,
    create: SocketRAMManagerRoute,
    created: SocketRAMManagerRoute,
    update: SocketRAMManagerRoute,
    updated: SocketRAMManagerRoute,
    delete: SocketRAMManagerRoute,
    deleted: SocketRAMManagerRoute;
}
export interface SocketRAMManagerRoute {
    request: string,
    multiple: string,
    success: string,
    error: string;
}
export interface SocketRAMManagerSubscribers<U, R extends U> {
    created: ((item: R) => void)[];
    updated: ((item: R) => void)[];
    deleted: ((item: R) => void)[];
}
export interface SocketRAMManagerRouteNotPlanned<U extends IData> {
    channel: string,
    callback: (response: { data?: U[]; }) => void;
}

export interface ISocketAction {
    update(newData: {}): Promise<this>;
    onUpdate(callback: (item: this) => void);
    offUpdate(callback: (item: this) => void);
    delete(): Promise<void>;
    onDelete(callback: (item: this) => void);
    offDelete(callback: (item: this) => void);
}
export interface ISocketData extends IData, ISocketAction {

}
type ISocketData2<U> = U & ISocketData;
export abstract class GenericSocketRAMManager<U extends IData, R extends ISocketData2<U>> extends GenericRAMManager<U, R> {
    private socketActions: {
        get: string;
        getAll: string;
        create: string;
        created: string;
        update: string;
        updated: string;
        delete: string;
        deleted: string;
    };
    private gotAllRecords: boolean = false;
    private subscribers: SocketRAMManagerSubscribers<U, R>;
    private recordsSubscribers: { [key: number]: SocketRAMManagerSubscribers<U, R>; } = {};
    private socketRoutes: SocketRAMManagerRoutes;

    public static defaultSocketName: string | undefined = undefined;


    protected constructor() {
        super();
        if(this.constructor == GenericSocketRAMManager) {
            throw "can't instanciate an abstract class";
        }

        this.init();
    }
    public getPrimaryKey(): string {
        return 'id';
    }
    protected getSocket(): Socket {
        return Socket.getInstance(this._getSocketName());
    }
    protected _getSocketName(): string | undefined {
        return GenericSocketRAMManager.defaultSocketName;
    }
    protected abstract getObjectName(): string;

    public init() {
        this.initVariables();
        this.initSocket();
    }
    private initVariables() {
        this.socketActions = {
            get: "get",
            getAll: "get/all",
            create: "create",
            created: "created",
            update: "update",
            updated: "updated",
            delete: "delete",
            deleted: "deleted"
        };

        this.subscribers = {
            created: [],
            updated: [],
            deleted: [],
        };

        let temp: { [key: string]: any; } = {};
        for(const [key, name] of Object.entries(this.socketActions)) {
            temp[key] = {
                request: `${this.getObjectName()}/${name}`,
                multiple: `${this.getObjectName()}/${name}/multiple`,
                success: `${this.getObjectName()}/${name}/success`,
                error: `${this.getObjectName()}/${name}/error`
            };
        }
        this.socketRoutes = temp as SocketRAMManagerRoutes;
    }
    private initSocket() {
        let createdRoute: SocketRAMManagerRouteNotPlanned<U> = {
            channel: this.getObjectName() + "/" + this.socketActions.created,
            callback: response => {
                if(response.data) {
                    for(let key in response.data) {
                        let obj = response.data[key];
                        let id = this.getId(obj);
                        if(id !== undefined) {
                            this.records[id] = this.transformElementInStorable(obj);
                            this.publish(this.socketActions.created, this.records[id]);
                        }

                    }
                }
            }
        };
        Socket.getInstance(this._getSocketName()).addRoute(createdRoute);

        let updatedRoute: SocketRAMManagerRouteNotPlanned<U> = {
            channel: this.getObjectName() + "/" + this.socketActions.updated,
            callback: response => {
                if(response.data) {
                    for(let key in response.data) {
                        const newData = response.data[key];
                        let id = this.getId(newData);
                        if(id !== undefined) {
                            if(this.records[id] !== undefined) {
                                this.updateDataInRAM(newData);
                                this.publish(this.socketActions.updated, this.records[id]);
                            }
                            else {
                                this.records[id] = this.transformElementInStorable(newData);
                                this.publish(this.socketActions.created, this.records[id]);
                            }
                        }
                    }
                }
            }
        };
        Socket.getInstance(this._getSocketName()).addRoute(updatedRoute);

        let deletedRoute: SocketRAMManagerRouteNotPlanned<U> = {
            channel: this.getObjectName() + "/" + this.socketActions.deleted,
            callback: response => {
                if(response.data) {
                    for(let data of response.data) {
                        let id = this.getId(data);
                        if(this.records[id] !== undefined) {
                            let oldData = this.records[id];
                            delete this.records[id];
                            this.publish(this.socketActions.deleted, oldData);

                        }
                    }
                }
            }
        };
        Socket.getInstance(this._getSocketName()).addRoute(deletedRoute);
    }


    //#region create
    public override async create(item: U, cbError?: (response: any) => void): Promise<R> {
        try {
            return await super.create(item);
        } catch(e) {
            if(cbError) {
                cbError(e);
            }
        }
        return undefined;
    }
    protected override beforeCreateItem(item: U, fromList: boolean): Promise<U> {
        return new Promise<U>((resolve, reject) => {
            if(!fromList) {
                Socket.getInstance(this._getSocketName()).sendMessageAndWait(this.socketRoutes.create.request, item, {
                    [this.socketRoutes.create.success]: response => {
                        let element = response.created[0];
                        resolve(element);
                    },
                    [this.socketRoutes.create.error]: response => {
                        reject(response);
                    }
                });
            }
            else {
                resolve(item);
            }
        });

    }
    protected override beforeCreateList(list: U[]): Promise<U[]> {
        return new Promise<U[]>((resolve, reject) => {
            Socket.getInstance(this._getSocketName()).sendMessageAndWait(this.socketRoutes.create.multiple, list, {
                [this.socketRoutes.create.success]: response => {
                    resolve(response.created);
                },
                [this.socketRoutes.create.error]: response => {
                    reject(response);
                }
            });
        });
    }
    //#endregion
    //#region update
    public override async update(item: U, cbError?: (response: any) => void): Promise<R> {
        try {
            return await super.update(item);
        } catch(e) {
            if(cbError) {
                cbError(e);
            }
        }
        return undefined;
    }
    protected override beforeUpdateItem(item: U, fromList: boolean): Promise<U> {
        return new Promise<U>((resolve, reject) => {
            if(!fromList) {
                Socket.getInstance(this._getSocketName()).sendMessageAndWait(this.socketRoutes.update.request, item, {
                    [this.socketRoutes.update.success]: response => {
                        let element = response.updated[0];
                        resolve(element);
                    },
                    [this.socketRoutes.update.error]: response => {
                        reject(response);
                    }
                });
            }
            else {
                resolve(item);
            }
        });
    }
    protected override beforeUpdateList(list: U[]): Promise<U[]> {
        return new Promise<U[]>((resolve, reject) => {
            Socket.getInstance(this._getSocketName()).sendMessageAndWait(this.socketRoutes.update.multiple, list, {
                [this.socketRoutes.update.success]: response => {
                    resolve(response.updated);
                },
                [this.socketRoutes.update.error]: response => {
                    reject(response);
                }
            });
        });
    }

    public async internalUpdate(id: number, newData: {}): Promise<R> {
        let oldData = this.records[id];
        if(oldData) {
            let mergedData = {
                ...oldData,
                ...newData
            };
            let result = await this.update(mergedData);
            return result;
        }
        return undefined;
    }
    //#endregion
    //#region delete
    public override async delete(item: U, cbError?: (response: any) => void): Promise<void> {
        try {
            await super.delete(item);
        } catch(e) {
            if(cbError) {
                cbError(e);
            }
        }
        return undefined;
    }
    protected override beforeDeleteItem(item: U, fromList: boolean): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            if(!fromList) {
                Socket.getInstance(this._getSocketName()).sendMessageAndWait(this.socketRoutes.delete.request, item, {
                    [this.socketRoutes.delete.success]: response => {
                        resolve();
                    },
                    [this.socketRoutes.delete.error]: response => {
                        reject(response);
                    }
                });
            }
            else {
                resolve();
            }
        });
    }
    protected override beforeDeleteList(list: U[]): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            Socket.getInstance(this._getSocketName()).sendMessageAndWait(this.socketRoutes.delete.multiple, list, {
                [this.socketRoutes.delete.success]: response => {
                    resolve();
                },
                [this.socketRoutes.delete.error]: response => {
                    reject(response);
                }
            });
        });
    }
    //#endregion

    //#region get
    protected override beforeGetById(id: number): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            if(this.records[id]) {
                resolve();
            }
            else {
                Socket.getInstance(this._getSocketName()).sendMessageAndWait(this.socketRoutes.get.request, {
                    [this.getPrimaryKey()]: id
                }, {
                    [this.socketRoutes.get.success]: response => {
                        if(response.data) {
                            this.records[id] = this.transformElementInStorable(response.data);
                        }
                        resolve();
                    },
                    [this.socketRoutes.get.error]: response => {
                        this.printErrors(response, "getById");
                        reject();
                    }
                });
            }
        });
    }
    protected override beforeGetByIds(ids: number[]): Promise<void> {
        return new Promise((resolve, reject) => {
            let missingIds: number[] = [];
            for(let id of ids) {
                if(!this.records[id]) {
                    missingIds.push(id);
                }
            }
            if(missingIds.length > 0) {
                Socket.getInstance(this._getSocketName()).sendMessageAndWait(this.socketRoutes.get.multiple, {
                    [this.getPrimaryKey()]: ids
                }, {
                    [this.socketRoutes.get.success]: response => {
                        if(response.data) {
                            for(let item of Object.values(response.data)) {
                                this.records[this.getId(item as U)] = this.transformElementInStorable(item as U);
                            }
                        }
                        resolve();
                    },
                    [this.socketRoutes.get.error]: response => {
                        this.printErrors(response, "getMultiple");
                        reject(response);
                    }
                });
            } else {
                resolve();
            }
        });
    }
    protected override beforeGetAll(): Promise<void> {
        return new Promise((resolve, reject) => {
            if(this.gotAllRecords) {
                resolve();
            } else {
                Socket.getInstance(this._getSocketName()).sendMessageAndWait(this.socketRoutes.getAll.request, {}, {
                    [this.socketRoutes.getAll.success]: response => {
                        if(response.data) {
                            this.gotAllRecords = true;
                            for(let item of Object.values(response.data)) {
                                this.records[this.getId(item as U)] = this.transformElementInStorable(item as U);
                            }
                        }
                        resolve();
                    },
                    [this.socketRoutes.getAll.error]: response => {
                        this.printErrors(response, "getAll");
                        reject();
                    }
                });
            }
        });
    }
    //#endregion

    public Extends<TBase extends new (...args: any[]) => U>(Base: TBase) {
        let that = this;
       
        return class SocketRAMManagerAction extends Base implements ISocketData2<U> {
            
            // public async update(newData: {} = {}) {
            //     let id = that.getId(this as U)
            //     let oldData = that.records[id];
            //     if(oldData) {
            //         let mergedData = {
            //             ...oldData,
            //             ...newData
            //         };
            //         let result = await this.update(mergedData);
            //         return result;
            //     }
            //     return await that.internalUpdate(id, newData);
            // }
            // public onUpdate(callback) {
            //     that.getId<SocketRAMManagerAction>(this);
            //     if(!that.recordsSubscribers.hasOwnProperty(id)) {
            //         that.recordsSubscribers[id] = {
            //             created: [],
            //             updated: [],
            //             deleted: []
            //         };
            //     }
            //     this.recordsSubscribers[id].updated.push(callback);
            // }
            // public offUpdate(callback) {
            //     if(this.recordsSubscribers[id]) {
            //         let index = this.recordsSubscribers[id].updated.indexOf(callback);
            //         if(index != -1) {
            //             this.recordsSubscribers[id].updated.splice(index, 1);
            //         }
            //     }
            // }
            // public async delete() {
            //     return await this.deleteById(id);
            // }
            // public onDelete(callback) {
            //     if(!this.recordsSubscribers.hasOwnProperty(id)) {
            //         this.recordsSubscribers[id] = {
            //             created: [],
            //             updated: [],
            //             deleted: []
            //         };
            //     }
            //     this.recordsSubscribers[id].deleted.push(callback);
            // }
            // public offDelete(callback) {
            //     if(this.recordsSubscribers[id]) {
            //         let index = this.recordsSubscribers[id].deleted.indexOf(callback);
            //         if(index != -1) {
            //             this.recordsSubscribers[id].deleted.splice(index, 1);
            //         }
            //     }
            // }
        };
    }

    protected getClassForItem(item: U): R {
        let internalExtend = 
    }

    protected override transformElementInStorable(item: U): R {
        let id = this.getId(item);

        let type = Extension.Basic(ExampleData);
        let example = new type();
        example.update({ name: "" }).then((r) => {
            r.name;
        });

        let addedType: SocketRAMManagerObject<U> = {
            update: async (newData: {} = {}) => {
                return await this.internalUpdate(id, newData);
            },
            onUpdate: (callback) => {
                if(!this.recordsSubscribers.hasOwnProperty(id)) {
                    this.recordsSubscribers[id] = {
                        created: [],
                        updated: [],
                        deleted: []
                    };
                }
                this.recordsSubscribers[id].updated.push(callback);
            },
            offUpdate: (callback) => {
                if(this.recordsSubscribers[id]) {
                    let index = this.recordsSubscribers[id].updated.indexOf(callback);
                    if(index != -1) {
                        this.recordsSubscribers[id].updated.splice(index, 1);
                    }
                }
            },
            delete: async () => {
                return await this.deleteById(id);
            },
            onDelete: (callback) => {
                if(!this.recordsSubscribers.hasOwnProperty(id)) {
                    this.recordsSubscribers[id] = {
                        created: [],
                        updated: [],
                        deleted: []
                    };
                }
                this.recordsSubscribers[id].deleted.push(callback);
            },
            offDelete: (callback) => {
                if(this.recordsSubscribers[id]) {
                    let index = this.recordsSubscribers[id].deleted.indexOf(callback);
                    if(index != -1) {
                        this.recordsSubscribers[id].deleted.splice(index, 1);
                    }
                }
            },
        };
        let socketObj: SocketRAMManagerItem<U> = {
            ...item,
            ...addedType
        };
        return this.addCustomFunctions(socketObj);
    }
    protected abstract addCustomFunctions(item: SocketRAMManagerItem<U>): R;


    private publish(type: string, data: R) {
        [...this.subscribers[type]].forEach(callback => callback(data));
    }

    // TODO deal with errors
    private printErrors(data: { status: number, errors?: [{ code: number, description: string; }]; }, action: string) {
        console.error(data, action);
    }

}


export class Extension {
    public static Basic<TBase extends new (...args: any[]) => IData>(Base: TBase) {
        return class SocketRAMManagerAction extends Base implements ISocketData {
            public async update(newData: {} = {}) {
                return await this.internalUpdate(id, newData);
            }
            public onUpdate(callback) {
                if(!this.recordsSubscribers.hasOwnProperty(id)) {
                    this.recordsSubscribers[id] = {
                        created: [],
                        updated: [],
                        deleted: []
                    };
                }
                this.recordsSubscribers[id].updated.push(callback);
            }
            public offUpdate(callback) {
                if(this.recordsSubscribers[id]) {
                    let index = this.recordsSubscribers[id].updated.indexOf(callback);
                    if(index != -1) {
                        this.recordsSubscribers[id].updated.splice(index, 1);
                    }
                }
            }
            public async delete() {
                return await this.deleteById(id);
            }
            public onDelete(callback) {
                if(!this.recordsSubscribers.hasOwnProperty(id)) {
                    this.recordsSubscribers[id] = {
                        created: [],
                        updated: [],
                        deleted: []
                    };
                }
                this.recordsSubscribers[id].deleted.push(callback);
            }
            public offDelete(callback) {
                if(this.recordsSubscribers[id]) {
                    let index = this.recordsSubscribers[id].deleted.indexOf(callback);
                    if(index != -1) {
                        this.recordsSubscribers[id].deleted.splice(index, 1);
                    }
                }
            }
        };
    }

    public static SayHello<TBase extends new (...args: any[]) => IData>(Base: TBase) {
        return class SayHello extends Base implements MyExampleDataAction {
            sayHello(): void {

            }
        };
    }
}

export type SocketRAMManagerItem<U extends IData> = U & SocketRAMManagerObject<U>;
export abstract class SocketRAMManager<U extends IData> extends GenericSocketRAMManager<U, SocketRAMManagerItem<U>> {
    protected addCustomFunctions(item: SocketRAMManagerItem<U>): SocketRAMManagerItem<U> {
        return item;
    }
}

