import { IData } from "../data/IData.data.avt";

export interface IRAMManager { }

export abstract class GenericRAMManager<U extends IData, R extends U> implements IRAMManager {
    private static allRams: { [key: string]: IRAMManager; } = {};

    protected static _getInstance<T extends IRAMManager>(): T {
        if(!this.allRams.hasOwnProperty(this.name)) {
            let temp: any = { class: this };
            this.allRams[this.name] = new temp["class"]();
        }
        return this.allRams[this.name] as T;
    }
    
    protected records: { [key: number]: R; };

    public abstract getPrimaryKey(): string;

    protected getId(item: U): number | undefined {
        if(item[this.getPrimaryKey()] !== undefined) {
            return item[this.getPrimaryKey()];
        }
        console.error("can't found key " + this.getPrimaryKey() + " inside ", item);
        return undefined;
    }
    protected constructor() {
        if(this.constructor == GenericRAMManager) {
            throw "can't instanciate an abstract class";
        }
        this.records = {};
    }

    protected abstract transformElementInStorable(item: U): R;
    //#region create
    async createList(list: U[]): Promise<R[]> {
        let result: R[] = [];
        list = await this.beforeCreateList(list);
        for(let item of list) {
            let resultItem = await this._create(item, true);
            if(resultItem) {
                result.push(resultItem);
            }
        }
        result = await this.afterCreateList(result);
        return result;
    }
    async create(item: U, ...args: any[]): Promise<R | undefined> {
        return await this._create(item, false);
    }
    private async _create(item: U, fromList: boolean): Promise<R | undefined> {
        let key = this.getId(item);
        if(key) {
            item = await this.beforeCreateItem(item, fromList);
            let createdItem = this.transformElementInStorable(item);
            this.records[key] = createdItem;
            this.records[key] = await this.afterCreateItem(createdItem, fromList);
            return this.records[key];
        }
        return undefined;
    }
    protected async beforeCreateList(list: U[]): Promise<U[]> {
        return list;
    }
    protected async beforeCreateItem(item: U, fromList: boolean): Promise<U> {
        return item;
    }
    protected async afterCreateItem(item: R, fromList: boolean): Promise<R> {
        return item;
    }
    protected async afterCreateList(list: R[]): Promise<R[]> {
        return list;
    }
    //#endregion

    //#region update
    async updateList(list: U[]): Promise<R[]> {
        let result: R[] = [];
        list = await this.beforeUpdateList(list);
        for(let item of list) {
            let resultItem = await this._update(item, true);
            if(resultItem) {
                result.push(resultItem);
            }
        }
        result = await this.afterUpdateList(result);
        return result;
    }
    async update(item: U, ...args: any[]): Promise<R | undefined> {
        return await this._update(item, false);
    }
    private async _update(item: U, fromList: boolean): Promise<R | undefined> {
        let key = await this.getId(item);
        if(key) {
            if(this.records[key]) {
                item = await this.beforeUpdateItem(item, fromList);
                this.updateDataInRAM(item);
                this.records[key] = await this.afterUpdateItem(this.records[key], fromList);
                return this.records[key];
            }
            else {
                console.error("can't update the item " + key + " because it wasn't found inside ram");
            }
        }
        return undefined;
    }
    protected async beforeUpdateList(list: U[]): Promise<U[]> {
        return list;
    }
    protected async beforeUpdateItem(item: U, fromList: boolean): Promise<U> {
        return item;
    }
    protected async afterUpdateItem(item: R, fromList: boolean): Promise<R> {
        return item;
    }
    protected async afterUpdateList(list: R[]): Promise<R[]> {
        return list;
    }

    protected updateDataInRAM(newData: U) {
        let dataInRAM = this.records[this.getId(newData)];
        let oldKeys: { [key: string]: string; } = {};
        for(let key in dataInRAM) {
            oldKeys[key] = key;
        }

        for(const [key, value] of Object.entries(newData)) {
            dataInRAM[key] = value;
            delete oldKeys[key];
        }

        for(let keyMissing of Object.keys(oldKeys)) {
            delete dataInRAM[keyMissing];
        }
    }
    //#endregion

    //#region delete
    async deleteList(list: U[]): Promise<void> {
        await this.beforeDeleteList(list);
        for(let item of list) {
            await this._delete(item, true);
        }
        await this.afterDeleteList(list);
    }
    async delete(item: U, ...args: any[]): Promise<void> {
        return await this._delete(item, false);
    }
    async deleteById(id: number): Promise<void> {
        let item = this.records[id];
        if(item) {
            return await this._delete(item, false);
        }
    }
    private async _delete(item: U, fromList: boolean): Promise<void> {
        let key = await this.getId(item);
        if(key && this.records[key]) {
            let oldItem = this.records[key];
            await this.beforeDeleteItem(oldItem, fromList);
            delete this.records[key];
            await this.afterDeleteItem(oldItem, fromList);
        }
    }
    protected async beforeDeleteList(list: U[]): Promise<void> { }
    protected async beforeDeleteItem(item: U, fromList: boolean): Promise<void> { }
    protected async afterDeleteItem(item: U, fromList: boolean): Promise<void> { }
    protected async afterDeleteList(list: U[]): Promise<void> { }
    //#endregion

    //#region get
    async get(id: number): Promise<R> {
        return await this.getById(id);
    }
    async getById(id: number): Promise<R> {
        await this.beforeGetById(id);
        if(this.records[id]) {
            let result = this.records[id];
            await this.afterGetById(result);
            return result;
        }
        return undefined;
    }
    protected async beforeGetById(id: number): Promise<void> { }
    protected async afterGetById(item: R): Promise<void> { }

    async getByIds(ids: number[]): Promise<R[]> {
        let result: R[] = [];
        await this.beforeGetByIds(ids);
        for(let id of ids) {
            if(this.records[id]) {
                result.push(this.records[id]);
            }
        }
        await this.afterGetByIds(result);
        return result;
    }
    protected async beforeGetByIds(ids: number[]): Promise<void> { }
    protected async afterGetByIds(items: R[]): Promise<void> { }

    async getAll(): Promise<{ [key: number]: R; }> {
        await this.beforeGetAll();
        await this.afterGetAll(this.records);
        return this.records;
    }
    protected async beforeGetAll(): Promise<void> { }
    protected async afterGetAll(result: { [key: number]: R; }): Promise<void> { }

    async getList(): Promise<U[]> {
        let data = await this.getAll();
        return Object.values(data);
    }
    //#endregion
}

export abstract class RAMManager<U extends IData> extends GenericRAMManager<U, U>{
    protected transformElementInStorable(item: U): U {
        return item;
    }

}