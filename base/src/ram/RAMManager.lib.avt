import { IData, IDataConstraint } from "../data/IData.data.avt";

export interface IRAMManager { }

export abstract class RAMManager<U extends IDataConstraint<U>> implements IRAMManager {
    private static allRams: { [key: string]: IRAMManager; } = {};

    protected static _getInstance<T extends IRAMManager>(): T {
        if(!this.allRams.hasOwnProperty(this.name)) {
            let temp: any = { class: this };
            this.allRams[this.name] = new temp["class"]();
        }
        return this.allRams[this.name] as T;
    }

    protected records: { [key: number]: U; };

    public abstract getPrimaryKey(): string;

    public getId(item: IDataConstraint<U>): number | undefined {
        if(item[this.getPrimaryKey()] !== undefined) {
            return item[this.getPrimaryKey()];
        }
        console.error("can't found key " + this.getPrimaryKey() + " inside ", item);
        return undefined;
    }

    protected constructor() {
        if(this.constructor == RAMManager) {
            throw "can't instanciate an abstract class";
        }
        this.records = {};
    }

    //#region create
    async createList(list: U[]): Promise<U[]> {
        let result: U[] = [];
        try {
            list = await this.beforeCreateList(list);
            for(let item of list) {
                let resultItem = await this._create(item, true);
                if(resultItem) {
                    result.push(resultItem);
                }
            }
            result = await this.afterCreateList(result);
        } catch(e) {
            console.error(e);
        }
        return result;
    }
    async create(item: U, ...args: any[]): Promise<U | undefined> {
        return await this._create(item, false);
    }
    private async _create(item: U, fromList: boolean): Promise<U | undefined> {
        try {
            item = await this.beforeCreateItem(item, fromList);
            let key = this.getId(item);
            if(key) {
                this.records[key] = item;
                this.records[key] = await this.afterCreateItem(item, fromList);
                return this.records[key];
            }
        } catch(e) {
            console.error(e);
        }
        return undefined;
    }
    protected async beforeCreateList(list: U[]): Promise<U[]> {
        return list;
    }
    protected async beforeCreateItem(item: U, fromList: boolean): Promise<U> {
        return item;
    }
    protected async afterCreateItem(item: U, fromList: boolean): Promise<U> {
        return item;
    }
    protected async afterCreateList(list: U[]): Promise<U[]> {
        return list;
    }

    //#endregion

    //#region update
    async updateList(list: U[]): Promise<U[]> {
        let result: U[] = [];
        try {
            list = await this.beforeUpdateList(list);
            for(let item of list) {
                let resultItem = await this._update(item, true);
                if(resultItem) {
                    result.push(resultItem);
                }
            }
        } catch(e) {
            console.error(e);
        }
        result = await this.afterUpdateList(result);
        return result;
    }
    async update(item: U, ...args: any[]): Promise<U | undefined> {
        return await this._update(item, false);
    }
    private async _update(item: U, fromList: boolean): Promise<U | undefined> {
        try {
            let key = await this.getId(item);
            if(key) {
                if(this.records[key]) {
                    item = await this.beforeUpdateItem(item, fromList);
                    this.updateDataInRAM(item);
                    this.records[key] = await this.afterUpdateItem(this.records[key], fromList);
                    return this.records[key];
                }
                else {
                    console.error("can't update the item " + key + " because it wasn't found inside ram");
                }
            }
        } catch(e) {
            console.error(e);
        }
        return undefined;
    }
    protected async beforeUpdateList(list: U[]): Promise<U[]> {
        return list;
    }
    protected async beforeUpdateItem(item: U, fromList: boolean): Promise<U> {
        return item;
    }
    protected async afterUpdateItem(item: U, fromList: boolean): Promise<U> {
        return item;
    }
    protected async afterUpdateList(list: U[]): Promise<U[]> {
        return list;
    }

    protected updateDataInRAM(newData: U | {}) {
        let item = this.records[this.getId(newData)];
        let oldKeys: { [prop: string]: string; } = {};
        let props = Object.getOwnPropertyNames(item);
        for(let prop of props) {
            let propInfo = Object.getOwnPropertyDescriptor(item, prop);
            if(propInfo.writable) {
                oldKeys[prop] = prop;
            }
        }

        for(const [key, value] of Object.entries(newData)) {
            if(oldKeys[key]) {
                item[key] = value;
                delete oldKeys[key];
            }
        }

        for(let keyMissing of Object.keys(oldKeys)) {
            item[keyMissing] = null;
        }
    }
    //#endregion

    //#region delete
    async deleteList(list: U[]): Promise<void> {
        try {
            await this.beforeDeleteList(list);
            for(let item of list) {
                await this._delete(item, true);
            }
            await this.afterDeleteList(list);
        } catch(e) {
            console.error(e);
        }
    }
    async delete(item: U, ...args: any[]): Promise<void> {
        return await this._delete(item, false);
    }
    async deleteById(id: number): Promise<void> {
        let item = this.records[id];
        if(item) {
            await this._delete(item, false);
        }
    }
    private async _delete(item: U, fromList: boolean): Promise<void> {
        try {
            let key = await this.getId(item);
            if(key && this.records[key]) {
                let oldItem = this.records[key];
                await this.beforeDeleteItem(oldItem, fromList);
                delete this.records[key];
                await this.afterDeleteItem(oldItem, fromList);
            }
        } catch(e) {
            console.error(e);
        }
    }
    protected async beforeDeleteList(list: U[]): Promise<void> { }
    protected async beforeDeleteItem(item: U, fromList: boolean): Promise<void> { }
    protected async afterDeleteItem(item: U, fromList: boolean): Promise<void> { }
    protected async afterDeleteList(list: U[]): Promise<void> { }
    //#endregion

    //#region get
    async get(id: number): Promise<U> {
        return await this.getById(id);
    }
    async getById(id: number): Promise<U | undefined> {
        try {
            await this.beforeGetById(id);
            if(this.records[id]) {
                let result = this.records[id];
                await this.afterGetById(result);
                return result;
            }
        } catch(e) {
            console.error(e);
        }
        return undefined;
    }
    protected async beforeGetById(id: number): Promise<void> { }
    protected async afterGetById(item: U): Promise<void> { }

    async getByIds(ids: number[]): Promise<U[]> {
        let result: U[] = [];
        try {
            await this.beforeGetByIds(ids);
            for(let id of ids) {
                if(this.records[id]) {
                    result.push(this.records[id]);
                }
            }
            await this.afterGetByIds(result);
        } catch(e) {
            console.error(e);
        }
        return result;
    }
    protected async beforeGetByIds(ids: number[]): Promise<void> { }
    protected async afterGetByIds(items: U[]): Promise<void> { }

    async getAll(): Promise<{ [key: number]: U; }> {
        try {
            await this.beforeGetAll();
            await this.afterGetAll(this.records);
        } catch(e) {
            console.error(e);
        }
        return this.records;
    }
    protected async beforeGetAll(): Promise<void> { }
    protected async afterGetAll(result: { [key: number]: U; }): Promise<void> { }

    async getList(): Promise<U[]> {
        let data = await this.getAll();
        return Object.values(data);
    }
    //#endregion
}