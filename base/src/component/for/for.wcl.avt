import { WebComponent, DefaultComponent } from "../../lib/WebComponent.lib.avt";
import { MutableAction } from "../../data/MutableAction.data.avt";

/**
 * Generate a loop 
 */
export class AvFor extends WebComponent implements DefaultComponent {

    //#region static

    //#endregion


    //#region props
    /**
     * Name of item inside loop
     */
    @attribute()
    item: string = "";

    /**
     * Name of property to loop though
     */
    @attribute()
    in: string = "";

    /**
     * Name of your index
     */
    @attribute()
    index: string = "";
    //#endregion


    //#region variables
    template: string = "";
    private parent: Element | undefined;
    public parentIndex: number = 0;
    public parentFor: AvFor | undefined;
    private otherPart: string[];

    private elementsByPath: { [key: string]: { [key: string]: HTMLElement[]; }; } = {};
    private elementsRootByIndex: { [key: string]: Element[]; } = {};
    private forInside: { [key: string]: AvFor[]; } = {};
    private maxIndex: number = 0;

    private mutableElement: any;
    private mutableActionArray: ((target: HTMLElement, type: MutableAction, path: string, element: any) => void)[];
    private mutableObjectArray: any;
    private mutableObjectName: string;
    //#endregion


    //#region states

    //#endregion


    //#region constructor
    constructor() {
        super();
        this.init();
    }
    //#endregion


    //#region methods
    private init(): void {
        if(!this.parent) {
            let shadow: ShadowRoot = this.getRootNode() as ShadowRoot;
            if(shadow.host) {
                this.parent = shadow.host;
                let parentsFor: AvFor[] = this.findParents<AvFor>("av-for", this.parent);
                let inParts = this.in.split(".");
                let firstPart = inParts.splice(0, 1)[0];

                if(this.parent["__mutableActions"].hasOwnProperty(firstPart)) {
                    this.mutableActionArray = this.parent["__mutableActions"][firstPart];
                    this.mutableObjectArray = this.parent["__mutable"];
                    this.mutableObjectName = firstPart;
                }
                else {
                    for(let parentFor of parentsFor) {
                        if(parentFor.item == firstPart) {
                            this.parentFor = parentFor as AvFor;
                            this.mutableActionArray = this.parentFor.mutableActionArray;
                            this.mutableObjectArray = this.parentFor.mutableObjectArray;
                            this.mutableObjectName = this.parentFor.mutableObjectName;
                            this.otherPart = inParts;
                            break;
                        }
                    }
                }

                if(this.mutableActionArray) {
                    let fctCb = (target: HTMLElement, type: MutableAction, path: string, element: any) => {
                        path = path.replace(this.mutableObjectName, "");
                        if(type == MutableAction.SET || path == this.getParentKey()) {
                            this.reset();
                            this.mutableElement = element;
                            let currentCreate = Object.prepareByPath(this.mutableElement, this.getParentKey());
                            if(currentCreate.canApply) {
                                if(Array.isArray(currentCreate.objToApply)) {
                                    for(let i = 0; i < currentCreate.objToApply.length; i++) {
                                        this.createForElement(currentCreate.objToApply[i], "[" + i + "]");
                                    }
                                }
                                else {
                                    for(let key in currentCreate.objToApply) {
                                        this.createForElement(currentCreate.objToApply[key], key);
                                    }
                                }
                            }
                            else if(!Array.isArray(element) && element !== undefined){
                                console.error("something went wrong, but I don't understand how this is possible");
                            }
                        }
                        else {
                            let otherPartRegexp = this.getParentKey().replace(/\[/g, "\\[").replace(/\]/g, "\\]");
                            let regexNumberLoop = new RegExp("^" + otherPartRegexp + "\\[(\\d*?)\\]$", "g");
                            let testPath = new RegExp("^" + otherPartRegexp + "(\\[\\d*?\\].*)$", "g").exec(path);
                            if(testPath) {
                                let pathToUse = testPath[1];
                                let matchTemp = path.match(regexNumberLoop);
                                if(matchTemp) {
                                    if(type == MutableAction.CREATED) {
                                        this.createForElement(element, pathToUse);
                                    }
                                    else if(type == MutableAction.UPDATED) {
                                        this.updateForElement(element, pathToUse);
                                    }
                                    else if(type == MutableAction.DELETED) {
                                        this.deleteForElement(element, pathToUse);
                                    }
                                }
                                else {
                                    if(type == MutableAction.CREATED) {
                                        this.updateForElement(element, pathToUse);
                                    }
                                    else if(type == MutableAction.UPDATED) {
                                        this.updateForElement(element, pathToUse);
                                    }
                                    else if(type == MutableAction.DELETED) {
                                        this.updateForElement(undefined, pathToUse);
                                    }
                                }
                            }
                        }
                    };
                    this.mutableActionArray.push(fctCb);

                    if(this.mutableObjectArray[this.mutableObjectName]) {
                        fctCb(this.parentElement, MutableAction.SET, '', this.mutableObjectArray[this.mutableObjectName]);
                    }
                }
                else {
                    console.error("variable " + this.in + " in parent can't be found");
                }
            }
        }
    }
    /**
     * key must be something like that [3]
     */
    private createForElement(data, key): void {
        let temp = document.createElement("DIV");
        temp.innerHTML = this.parent["__loopTemplate"][this.getAttribute("_id")];
        let index = Number(key.replace("[", "").replace("]", ""));
        if(index > this.maxIndex) {
            this.maxIndex = index;
        }
        let maxSaved = this.maxIndex;
        // move element bigger
        for(let i = maxSaved; i >= index; i--) {
            if(this.elementsRootByIndex.hasOwnProperty(i)) {
                if(i + 1 > this.maxIndex) {
                    this.maxIndex = i + 1;
                }
                this.elementsRootByIndex[i + 1] = this.elementsRootByIndex[i];
                this.elementsByPath[i + 1] = this.elementsByPath[i];
                this.forInside[i + 1] = this.forInside[i];
                for(let elements of Object.values(this.elementsByPath[i + 1])) {
                    for(let element of elements) {
                        if(element["__values"].hasOwnProperty("$index$_" + this.index)) {
                            element["__values"]["$index$_" + this.index] = i + 1;
                            element["__templates"]["$index$_" + this.index].forEach((cb) => {
                                cb(element);
                            });
                        }
                    }
                }
                for(let forEl of this.forInside[i + 1]) {
                    forEl.parentIndex = i + 1;
                    forEl.updateIndexes(this.index, i + 1);
                }
            }
        }
        let result: { [key: string]: HTMLElement[]; } = this.parent['__prepareForCreate'][this.getAttribute("_id")](temp, data, key, this.getAllIndexes(index));
        let forEls = Array.from(temp.querySelectorAll<AvFor>("av-for"));
        this.forInside[index] = [];
        for(let forEl of forEls) {
            forEl.parentIndex = index;
            this.forInside[index].push(forEl);
        }
        this.elementsByPath[index] = result;
        this.elementsRootByIndex[index] = [];
        let appendChild = (el) => { this.appendChild(el); };

        if(index != this.maxIndex) {
            let previous = this.elementsRootByIndex[index + 1][0];
            appendChild = (el) => { this.insertBefore(el, previous); };
        }
        while(temp.children.length > 0) {
            let el = temp.children[0];
            this.elementsRootByIndex[index].push(el);
            appendChild(el);
        }
    }
    /**
     * key must be something like that [3] or [3].name
     */
    private updateForElement(data, key): void {
        let idendity = key.match(/\[\d*?\]/g)[0];
        let index = Number(idendity.replace("[", "").replace("]", ""));
        if(index > this.maxIndex) {
            this.maxIndex = index;
        }
        key = key.replace(idendity, "");
        if(key.startsWith(".")) { key = key.slice(1); }
        if(this.elementsByPath[index]) {
            for(let pathName in this.elementsByPath[index]) {
                if(pathName.startsWith(key)) {
                    for(let element of this.elementsByPath[index][pathName]) {
                        for(let valueName in element["__values"]) {
                            if(valueName == key) {
                                element["__values"][valueName] = data;
                                element["__templates"][valueName].forEach((cb) => {
                                    cb(element); 
                                });
                            }
                            else if(valueName.startsWith(key)) {
                                let temp = Object.prepareByPath(data, valueName, key);
                                if(temp.canApply) {
                                    element["__values"][valueName] = temp.objToApply;
                                    element["__templates"][valueName].forEach((cb) => {
                                        cb(element);
                                    });
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            this.createForElement(this.mutableElement[index], idendity);
        }
    }
    /**
     * key must be something like that [3]
     */
    private deleteForElement(data, key): void {
        let index = Number(key.replace("[", "").replace("]", ""));
        if(index > this.maxIndex) {
            this.maxIndex = index;
        }
        if(this.elementsRootByIndex[index]) {
            for(let el of this.elementsRootByIndex[index]) {
                el.remove();
            }
            delete this.elementsRootByIndex[index];
            delete this.elementsByPath[index];
            for(let i = index; i <= this.maxIndex; i++) {
                if(i == this.maxIndex) {
                    this.maxIndex--;
                }
                if(this.elementsRootByIndex.hasOwnProperty(i)) {
                    this.elementsRootByIndex[i - 1] = this.elementsRootByIndex[i];
                    this.elementsByPath[i - 1] = this.elementsByPath[i];
                    this.forInside[i - 1] = this.forInside[i];
                    for(let elements of Object.values(this.elementsByPath[i - 1])) {
                        for(let element of elements) {
                            if(element["__values"].hasOwnProperty("$index$_" + this.index)) {
                                element["__values"]["$index$_" + this.index] = i - 1;
                                element["__templates"]["$index$_" + this.index].forEach((cb) => {
                                    cb(element);
                                });
                            }
                        }
                    }
                    for(let forEl of this.forInside[i - 1]) {
                        forEl.parentIndex = i - 1;
                        forEl.updateIndexes(this.index, i - 1);
                    }
                }
            }
        }
    }
    private reset(): void {
        this.elementsByPath = {};
        this.elementsRootByIndex = {};
        this.forInside = {};
        this.maxIndex = 0;
        this.innerHTML = "";
    }
    protected override postCreation(): void {
        this.init();
    }

    public getParentKey(): string {
        let el: AvFor = this;
        let result = "";
        while(el.parentFor) {
            result = result + "[" + el.parentIndex + "]." + this.otherPart.join(".");
            el = el.parentFor;
        }
        return result;
    }

    public updateIndexes(indexName, indexValue): void {
        for(let position in this.elementsByPath) {
            for(let elements of Object.values(this.elementsByPath[position])) {
                for(let element of elements) {
                    if(element["__values"].hasOwnProperty("$index$_" + indexName)) {
                        element["__values"]["$index$_" + indexName] = indexValue;
                        element["__templates"]["$index$_" + indexName].forEach((cb) => {
                            cb(element);
                        });
                    }
                }
            }
        }
        for(let index in this.forInside) {
            this.forInside[index].forEach((forEl) => {
                forEl.updateIndexes(indexName, indexValue);
            });
        }

    }

    private getAllIndexes(currentIndex: number): { [key: string]: number; } {
        let result: { [key: string]: number; } = {};
        let el: AvFor = this;

        while(el.parentFor) {
            result[el.parentFor.index] = el.parentIndex;
            el = el.parentFor;
        }
        result[this.index] = currentIndex;
        return result;
    }
	//#endregion

}