import { StateManager } from "../../../lib/StateManager.lib.avt";
import { DefaultComponent, WebComponent } from "../../../lib/WebComponent.lib.avt";
import { AvPage } from "../Page/Page.wcl.avt";

export abstract class AvRouter extends WebComponent implements DefaultComponent {

    //#region static

    //#endregion


    //#region props

    //#endregion


    //#region variables
    private oldPage: AvPage;
    @ViewElement()
    public contentEl: HTMLDivElement;
    //#endregion


    //#region states

    //#endregion


    //#region constructor

    //#endregion


    //#region methods
    protected abstract defineRoutes(): { [key: string]: new () => AvPage; };

    private register(): void {
        let routes = this.defineRoutes();

        for(let key in routes) {
            this.initRoute(key, routes[key]);
        }
    }
    private initRoute(path: string, elementCtr: new () => AvPage) {
        let element:AvPage = undefined;
        StateManager.getInstance("navigation").subscribe(path, {
            active: (currentState) => {
                if(!element){
                    element = new elementCtr();
                    this.contentEl.appendChild(element);
                }
                if(this.oldPage && this.oldPage != element) {
                    this.oldPage.show = false;
                }
                element.show = true;
                this.oldPage = element;
                if(window.location.pathname != currentState) {
                    let newUrl = window.location.origin + currentState;
                    document.title = element.defineTitle();
                    window.history.pushState({}, element.defineTitle(), newUrl);
                }
            }
        });
    }
    protected override postCreation(): void {
        this.register();
        if(window.localStorage.getItem("navigation_url")) {
            StateManager.getInstance("navigation").setActiveState(window.localStorage.getItem("navigation_url"));
			window.localStorage.removeItem("navigation_url")
        }
        else {
            StateManager.getInstance("navigation").setActiveState(window.location.pathname);
        }
		window.onpopstate = (e) => {
			if(window.location.pathname != StateManager.getInstance("navigation").getActiveState()) {
				StateManager.getInstance("navigation").setActiveState(window.location.pathname);
			}
		}
    }
	//#endregion
	
}