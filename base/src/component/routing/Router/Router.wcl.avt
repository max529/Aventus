import { ResourceLoader } from "../../../lib/ResourceLoader.lib.avt";
import { StateManager } from "../../../states/StateManager.lib.avt";
import { DefaultComponent, WebComponent } from "../../../lib/WebComponent.lib.avt";
import { AvPage } from "../Page/Page.wcl.avt";
import { State } from "../../../states/State.lib.avt";

export type AvRouteAsyncOption = {
    route: string,
    scriptUrl: string,
    render: () => new () => AvPage;
};
export abstract class AvRouter extends WebComponent implements DefaultComponent {

    //#region static

    //#endregion


    //#region props

    //#endregion


    //#region variables
    private oldPage: AvPage;
    @ViewElement()
    public contentEl: HTMLDivElement;

    private allRoutes: { [key: string]: AvRouteAsyncOption; } = {};
    //#endregion


    //#region states

    //#endregion


    //#region constructor

    //#endregion


    //#region methods
    /**
     * Add all your routes inside this function (addRoute or addRouteAsync)
     */
    protected abstract defineRoutes(): void;

    protected addRouteAsync<T extends AvPage>(options: AvRouteAsyncOption) {
        this.allRoutes[options.route] = options;
    }
    protected addRoute(route: string, elementCtr: new () => AvPage) {
        this.allRoutes[route] = {
            route: route,
            scriptUrl: '',
            render: () => elementCtr
        };
    }

    private register(): void {
        try {
            this.defineRoutes();

            for(let key in this.allRoutes) {
                this.initRoute(key);
            }
        } catch(e) {
            console.log(e);
        }
    }
    private initRoute(path: string) {
        let element: AvPage = undefined;
        let allRoutes = this.allRoutes;
        let namespace = this.getNamespace();
        StateManager.getInstance("navigation").subscribe(path, {
            active: async (currentState) => {
                if(!element) {
                    let options = allRoutes[path];
                    if(options.scriptUrl != "") {
                        await ResourceLoader.loadInHead(options.scriptUrl);
                    }

                    let constructor = options.render();
                    element = new constructor;
                    this.contentEl.appendChild(element);
                }
                if(this.oldPage && this.oldPage != element) {
                    this.oldPage.show = false;
                }
                element.show = true;
                this.oldPage = element;
                if(window.location.pathname != currentState.name) {
                    let newUrl = window.location.origin + currentState.name;
                    document.title = element.defineTitle();
                    window.history.pushState({}, element.defineTitle(), newUrl);
                }
            }
        });
    }
    protected override postCreation(): void {
        this.register();
        if(window.localStorage.getItem("navigation_url")) {
            State.activate(window.localStorage.getItem("navigation_url"), StateManager.getInstance("navigation"));
            window.localStorage.removeItem("navigation_url");
        }
        else {
            State.activate(window.location.pathname, StateManager.getInstance("navigation"));
        }
        window.onpopstate = (e) => {
            if(window.location.pathname != StateManager.getInstance("navigation").getActiveState().name) {
                State.activate(window.location.pathname, StateManager.getInstance("navigation"));
            }
        };
    }
    //#endregion

}
