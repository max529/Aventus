import { IData } from "../../data/IData.data.avt";
import { WebComponent, DefaultComponent } from "../../lib/WebComponent.lib.avt";
import { SocketRAMManagerObject } from "../../ram/SocketRAMManager.lib.avt";

/**
 * Use this object to display an element from the DB
 * TODO : Check this component and check if it's usefull
 */
export abstract class DisplayElement<T extends IData> extends WebComponent implements DefaultComponent {
	//#region variables
	currentInstance: T & SocketRAMManagerObject<T>;
	eventsFunctions: { "onUpdate": (data:T) => void, "onDelete": (data:T) => void } = {
		"onUpdate": (data:T & SocketRAMManagerObject<T>) => {
			this.currentInstance = data;
			this.displayInfos(data);
			this.onUpdateFunction(data);
		},
		"onDelete": (data:T & SocketRAMManagerObject<T>) => {
			this.onDeleteFunction(data);
			this.destroy();
		}
	};
	//#endregion
	
	//#region methods
	protected abstract displayInfos(newData: T & SocketRAMManagerObject<T>);

	protected onDeleteFunction(data: T & SocketRAMManagerObject<T>) {

	}
	protected onUpdateFunction(data: T & SocketRAMManagerObject<T>) {
		
	}

	protected destroy(): void {
		if(this.currentInstance) {
			this.unsubscribeFromInstance();
		}
	}

	protected subscribeToInstance() {
		this.currentInstance.offUpdate(this.eventsFunctions.onUpdate);
		this.currentInstance.offDelete(this.eventsFunctions["onDelete"]);
	}

	protected unsubscribeFromInstance() {
		this.currentInstance.offUpdate(this.eventsFunctions["onUpdate"]);
		this.currentInstance.offDelete(this.eventsFunctions["onDelete"]);
	}

	/**
	 * Assign a new instance to the component
	 * @param {T & SocketRAMManagerObject} newInstance - The new instance to display
	 */
	protected switchInstance(newInstance: T & SocketRAMManagerObject<T>) {
		if (this.currentInstance) {
			this.unsubscribeFromInstance();
		}
		this.currentInstance = newInstance;
		this.subscribeToInstance();
		this.displayInfos(newInstance);
	}
	//#endregion
			
}