import { AvFormElement } from "../../../component/form/form-element/form-element.wcl.avt";
import { WebComponent, DefaultComponent } from "../../../lib/WebComponent.lib.avt";
import { HttpRequest } from "../../../lib/HttpRequest.lib.avt";

export class AvForm extends WebComponent implements DefaultComponent {

    //#region static

    //#endregion


    //#region props
    /**
    * Show/Hide the loading animation
    */
    @attribute()
    loading: boolean;

    @attribute()
    method: string = 'get';

    @attribute()
    action: string = '';

    @attribute()
    use_event: boolean = false;
    //#endregion


    //#region variables
    private fields: AvFormElement<any>[] = [];
    private submitElement: HTMLElement;
    //#endregion


    //#region states

    //#endregion


    //#region constructor

    //#endregion


    //#region methods
    public async submit() {
        const data = {};

        this.fields.forEach(field => {
            if (field.required) {
                data[field.name] = field.value;
            } else {
                if (field.value) {
                    data[field.name] = field.value;
                }
            }
        });

        if (this.use_event) {
            const customEvent = new CustomEvent("submit", {
                detail: {
                    data,
                    action: this.action,
                    method: this.method
                },
                bubbles: true,
                composed: true
            });

            this.dispatchEvent(customEvent);
        } else {
            const formData = new FormData();
            for (const key in data) {
                formData.append(key, data[key]);
            }

            const request = new HttpRequest({
                url: this.action,
                method: HttpRequest.getMethod(this.method),
                data: formData
            });
        }
    }

    /**
     * Set the element that will perform the submit action on click.
     */
    public registerSubmit(submitElement: HTMLElement) {
        this.submitElement = submitElement;
    }

    /**
     * Add a field to the form.
     */
    public subscribe<T>(fieldHTML: AvFormElement<T>) {
        const fieldIndex = this.fields.push(fieldHTML);

        const _goNext = (e: KeyboardEvent, index: number = fieldIndex) => {
            if (e.keyCode === 13) {
                if (this.fields[index]) {
                    if (this.fields[index].focusable) {
                        this.fields[index].setFocus();
                    } else {
                        _goNext(e, index + 1);
                    }
                } else {
                    this.submit();
                }
            }
        };

        fieldHTML.addEventListener("keydown", _goNext);
    }
	//#endregion
}