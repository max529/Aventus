import { AvForm } from "../form/form.wcl.avt";
import { MutableAction } from "../../../data/MutableAction.data.avt";
import { WebComponent, DefaultComponent } from "../../../lib/WebComponent.lib.avt";

@Debugger({
    writeCompiled:true
})
export abstract class AvFormElement<T> extends WebComponent implements DefaultComponent {
    //#region static

    //#endregion


    //#region props
    /**
     * If true, the element will be required
     */
    @attribute()
    required: boolean = false;
    /**
     * Name to use inside your form
     */
    @attribute()
    name: string = "";

    /**
     * If true, the element can be focusable
     */
    @attribute()
    focusable: boolean = false;

    /**
     * Value to use inside your component
     */
    @mutable()
    value: T = this.getDefaultValue();

    @mutable((target: AvFormElement<T>) => {
        console.log("Display errors");
        target.displayErrors();
    })
    protected errors: string[] = [];
    //#endregion

    //#region variables

    //#endregion


    //#region states

    //#endregion


    //#region constructor

    //#endregion


    //#region methods
    protected override postCreation(): void {
        this.findParentByType(AvForm).subscribe(this);
    }

    public abstract getDefaultValue(): T;

    public onValueChanged() {
        this.dispatchEvent(new CustomEvent("change", {
            detail: {
                value: this.value
            }
        }));
    }

    public setFocus() {}

    public validate(): boolean {
        return true;
    }

    public setError(message: string) {
        this.errors.push(message);
    }

    public clearErrors() {
        this.errors = [];
    }

    protected displayErrors() {}
	//#endregion

}