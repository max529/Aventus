import { StateManager, StateSlug } from "../states/StateManager.lib.avt";
import { WatchAction } from "../data/WatchAction.data.avt";
import { State } from "../states/State.lib.avt";


export interface DebuggerConfig {
    writeCompiled?: boolean;
}

export interface DefaultComponent {
    [key: string]: any; // index signature to remove error
}

export abstract class WebComponent extends HTMLElement implements DefaultComponent {
    private static __allDefinitions: (new () => WebComponent)[] = [];
    public static lastDefinition: number = 0;
    private static registerDefinition(def: new () => WebComponent) {
        WebComponent.lastDefinition = Date.now();
        WebComponent.__allDefinitions.push(def);
    }
    static getAllClassesOf<T>(type: typeof WebComponent): (new () => WebComponent)[] {
        let result: (new () => WebComponent)[] = [];
        for(let def of WebComponent.__allDefinitions) {
            if(def.prototype instanceof type) {
                result.push(def);
            }
        }
        return result;
    }
    static getAllDefinitions(): (new () => WebComponent)[] {
        return WebComponent.__allDefinitions;
    }
    static get observedAttributes() {
        return [];
    }

    private _first: boolean;
    private _isReady: boolean;
    public get isReady(): boolean {
        return this._isReady;
    }

    private _translations: { [key: string]: { [key: string]: string; }; };


    private _components: { [key: string]: HTMLBaseElement[]; };
    private __onChangeFct: { [key: string]: ((path: string) => void)[]; } = {};

    private __watch: any;
    private __watchActions: {} = {};
    private __prepareForCreate: [] = [];
    private __prepareForUpdate: [] = [];
    private __loopTemplate: { [key: string]: () => string; } = {};
    private __watchActionsCb: { [key: string]: (type: WatchAction, path: string, element: any) => void; } = {};

    private __isDefaultState: boolean = true;
    private __defaultActiveState: (() => void)[] = [];
    private __defaultInactiveState: (() => void)[] = [];
    private __statesList: {
        [statePattern: string]: {
            [managerName: string]: {
                active: ((state: State, slugs: StateSlug) => void)[],
                inactive: ((state: State, nextState: State, slugs: StateSlug) => void)[],
                askChange: ((state: State, nextState: State, slugs: StateSlug) => Promise<boolean>)[],
            };
        };
    } = {};

    public getClassName(): string {
        return this.constructor.name;
    };


    constructor() {
        super();
        if(this.constructor == WebComponent) {
            throw "can't instanciate an abstract class";
        }
        this._first = true;
        this._isReady = false;
        this.__prepareVariables();
        this.__prepareTranslations();
        this.__prepareWatchesActions();
        this.__initWatches();
        this.__prepareTemplate();
        this.__selectElementNeeded();
        this.__registerOnChange();
        this.__createStates();
        this.__prepareForLoop();
        this.__endConstructor();
    }
    private __prepareVariables() { }
    private __prepareWatchesActions() {
        if(Object.keys(this.__watchActions).length > 0) {
            if(!this.__watch) {
                this.__watch = Object.transformIntoWatcher({}, (type, path, element) => {
                    let action = this.__watchActionsCb[path.split(".")[0]] || this.__watchActionsCb[path.split("[")[0]];
                    action(type, path, element);
                });
            }
        }
    }
    private __initWatches() { }
    private __prepareForLoop() { }
    //#region translation
    private __getLangTranslations() {
        return [];
    }
    private __prepareTranslations() {
        this._translations = {};
        let langs = this.__getLangTranslations();
        for(let i = 0; i < langs.length; i++) {
            this._translations[langs[i]] = {};
        }
        this.__setTranslations();
    }
    private __setTranslations() {

    }
    //#endregion

    //#region template
    private __getStyle() {
        return [":host{display:inline-block;box-sizing:border-box}:host *{box-sizing:border-box}"];
    }
    private __getHtml() {
        return {
            html: '<slot></slot>',
            slots: {
                default: '<slot></slot>'
            }
        };
    }
    private __prepareTemplate() {
        let tmpl = document.createElement('template');
        tmpl.innerHTML = `
        <style>
            ${this.__getStyle().join("\r\n")}
        </style>${this.__getHtml().html}`;
        let shadowRoot = this.attachShadow({ mode: 'open' });
        shadowRoot.appendChild(tmpl.content.cloneNode(true));
        customElements.upgrade(this);
    }
    //#endregion




    //#region select element

    private __getMaxId() {
        return [];
    }
    private __selectElementNeeded(ids = null) {
        if(ids == null) {
            var _maxId = this.__getMaxId();
            this._components = {};
            for(var i = 0; i < _maxId.length; i++) {
                for(let j = 0; j < _maxId[i][1]; j++) {
                    let key = _maxId[i][0].toLowerCase() + "_" + j;
                    this._components[key] = Array.from(this.shadowRoot.querySelectorAll('[_id="' + key + '"]'));
                }
            }
        }
        else {

            for(let i = 0; i < ids.length; i++) {
                //this._components[ids[i]] = this.shadowRoot.querySelectorAll('[_id="component' + ids[i] + '"]');
            }
        }

        this.__mapSelectedElement();
    }
    private __mapSelectedElement() {

    }
    //#endregion
    private __registerOnChange() {

    }
    private __endConstructor() { }

    private connectedCallback() {
        this.__defaultValueAttr();
        this.__defaultValueProp();
        this.__upgradeAttributes();
        this.__addEvents();

        if(this._first) {
            this._first = false;
            this.__applyTranslations();
            setTimeout(() => {
                this.__subscribeState();
                this.postCreation();
                this._isReady = true;
                this.dispatchEvent(new CustomEvent('postCreationDone'));
            });
        }
    }
    private __defaultValueAttr() { }
    private __defaultValueProp() { }
    private __upgradeAttributes() { }
    private __listBoolProps() {
        return [];
    }
    private __upgradeProperty(prop) {
        let boolProps = this.__listBoolProps();
        if(boolProps.indexOf(prop) != -1) {
            if(this.hasAttribute(prop) && (this.getAttribute(prop) === "true" || this.getAttribute(prop) === "")) {
                let value = this.getAttribute(prop);
                delete this[prop];
                this[prop] = value;
            }
            else {
                this.removeAttribute(prop);
                this[prop] = false;
            }
        }
        else {
            if(this.hasAttribute(prop)) {
                let value = this.getAttribute(prop);
                delete this[prop];
                this[prop] = value;
            }
        }
    }
    private __addEvents() { }
    private __applyTranslations() { }
    private __getTranslation(key) {
        if(!this._translations) return;

        var lang = localStorage.getItem('lang');
        if(lang === null) {
            lang = 'en';
        }

        if(key.indexOf('lang.') === 0) {
            key = key.substring(5);
        }


        if(this._translations[lang] !== undefined) {
            return this._translations[lang][key];
        }

        return key;
    }

    private __createStates() {}
    private __createStatesList(statePattern: string, managerName: string) {
        if(!this.__statesList[statePattern]) {
            this.__statesList[statePattern] = {};
        }
        if(!this.__statesList[statePattern][managerName]) {
            this.__statesList[statePattern][managerName] = {
                active: [],
                inactive: [],
                askChange: []
            };
        }
    }
    private __inactiveDefaultState() {
        if(this.__isDefaultState) {
            this.__isDefaultState = false;
            for(let fct of this.__defaultInactiveState) {
                fct.bind(this)();
            }
        }
    }
    private __activeDefaultState(nextStep: string, managerName: string) {
        if(!this.__isDefaultState) {
            for(let pattern in this.__statesList) {
                if(StateManager.canBeActivate(pattern, nextStep)){
                    if(this.__statesList[pattern][managerName]){
                        return;
                    }
                }
            }
            this.__isDefaultState = true;
            for(let fct of this.__defaultActiveState) {
                fct.bind(this)();
            }
        }
    }
    private __subscribeState() {
        for(let route in this.__statesList) {
            for(let managerName in this.__statesList[route]) {
                StateManager.getInstance(managerName).subscribe(route, this.__statesList[route][managerName]);
            }
        }
    }
    private __unsubscribeState() {
        for(let route in this.__statesList) {
            for(let managerName in this.__statesList[route]) {
                StateManager.getInstance(managerName).unsubscribe(route, this.__statesList[route][managerName]);
            }
        }
    }



    private attributeChangedCallback(name, oldValue, newValue) {
        if(oldValue !== newValue || !this.isReady) {
            if(this.__onChangeFct.hasOwnProperty(name)) {
                for(let fct of this.__onChangeFct[name]) {
                    fct('');
                }
            }
        }
    }

    protected postCreation() { }

    

}

