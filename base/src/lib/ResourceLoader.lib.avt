
export interface ResourceLoaderOptions {
    url: string;
    success?: (data: any) => void;
    error?: (error: any) => void;
}
export class ResourceLoader {
    private static waitingResources = {};

    static load(options: ResourceLoaderOptions, preventCache: boolean = false) {
        let resourceData = localStorage.getItem("resource:" + options.url);
        if(resourceData) {
            options.success(resourceData);
        } else {
            if(!this.waitingResources.hasOwnProperty(options.url)) {
                this.waitingResources[options.url] = [options.success];

                fetch(options.url)
                    .then(async response => {
                        let html = await response.text();

                        if(preventCache) {
                            localStorage.setItem("resource:" + options.url, html);
                        }

                        for(let i = 0; i < this.waitingResources[options.url].length; i++) {
                            this.waitingResources[options.url][i](html);
                        }
                        delete this.waitingResources[options.url];
                    });
            } else {
                this.waitingResources[options.url].push(options.success);
            }
        }
    }
}