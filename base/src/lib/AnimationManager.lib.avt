
export interface AnimationOptions {
    animate?: Function,
    stopped?: Function,
    fps?: number;
}

export class AnimationManager {
    static baseFps: number = 60;
    private options: AnimationOptions;
    private nextFrame: number;
    private fpsInterval: number;
    private continueAnimation: boolean;

    constructor(options: AnimationOptions) {
        if(!options.animate) {
            options.animate = () => { };
        }
        if(!options.stopped) {
            options.stopped = () => { };
        }
        if(!options.fps) {
            options.fps = AnimationManager.baseFps;
        }
        this.options = options;
        this.fpsInterval = 1000 / this.options.fps;
    }

    private animate(): void {
        let now = window.performance.now();
        let elapsed = now - this.nextFrame;
        if(elapsed <= this.fpsInterval) {
            requestAnimationFrame(this.animate);
            return;
        }
        this.nextFrame = now - (elapsed % this.fpsInterval);

        setTimeout(() => {
            this.animate();
        }, 0);
        if(this.continueAnimation) {
            requestAnimationFrame(this.animate);
        }
        else {
            this.options.stopped();
        }
    }
    /**
     * Start the of animation
     */
    start(): void {
        if(this.continueAnimation == false) {
            this.continueAnimation = true;
            this.nextFrame = window.performance.now();
            this.animate();
        }
    }

    /**
     * Stop the animation
     */
    stop(): void {
        this.continueAnimation = false;
    }

    /**
     * Get the FPS
     *
     * @returns {number}
     */
    getFPS(): number {
        return this.options.fps;
    }

    /**
     * Set the FPS
     *
     * @param fps
     */
    setFPS(fps: number): void {
        this.options.fps = fps;
        this.fpsInterval = 1000 / this.options.fps;
    }

    /**
     * Get the animation status (true if animation is running)
     *
     * @returns {boolean}
     */
    isStarted(): boolean {
        return this.continueAnimation;
    }
}