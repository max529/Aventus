export interface ResizeObserverOptions {
    callback: CallableFunction;
    fps?: number;
}
export class AvResizeObserver {
    private callback: CallableFunction;
    private targets: Element[];
    private fpsInterval: number;
    private nextFrame: number;
    private entriesChangedEvent: {};
    private willTrigger: boolean;

    private static resizeObserverClassByObject: {
        [key: string]: AvResizeObserver[];
    } = {};
    private static uniqueInstance: ResizeObserver;
    private static getUniqueInstance(): ResizeObserver {
        if(!AvResizeObserver.uniqueInstance) {
            AvResizeObserver.uniqueInstance = new ResizeObserver(entries => {
                let allClasses: AvResizeObserver[] = [];
                for(let j = 0; j < entries.length; j++) {
                    let entry = entries[j];
                    let index: string = entry.target['sourceIndex'];
                    if(AvResizeObserver.resizeObserverClassByObject[index]) {
                        for(let i = 0; i < AvResizeObserver.resizeObserverClassByObject[index].length; i++) {
                            let classTemp = AvResizeObserver.resizeObserverClassByObject[index][i];
                            classTemp.entryChanged(entry);
                            if(allClasses.indexOf(classTemp) == -1) {
                                allClasses.push(classTemp);
                            }
                        }
                    }
                }
                for(let i = 0; i < allClasses.length; i++) {
                    allClasses[i].triggerCb();
                }
            });
        }
        return AvResizeObserver.uniqueInstance;
    }

    constructor(options: ResizeObserverOptions | CallableFunction) {
        let realOption: ResizeObserverOptions;
        if(options instanceof Function) {
            realOption = {
                callback: options,
            };
        }
        else {
            realOption = options;
        }

        this.callback = realOption.callback;
        this.targets = [];
        if(!realOption.fps) {
            realOption.fps = 60;
        }
        if(realOption.fps != -1) {
            this.fpsInterval = 1000 / realOption.fps;
        }
        this.nextFrame = 0;
        this.entriesChangedEvent = {};
        this.willTrigger = false;
    }
    observe(target: Element) {
        if(!target["sourceIndex"]) {
            target["sourceIndex"] = Math.random().toString(36);
            this.targets.push(target);
            AvResizeObserver.resizeObserverClassByObject[target["sourceIndex"]] = [];
            AvResizeObserver.getUniqueInstance().observe(target);
        }

        if(AvResizeObserver.resizeObserverClassByObject[target["sourceIndex"]].indexOf(this) == -1) {
            AvResizeObserver.resizeObserverClassByObject[target["sourceIndex"]].push(this);
        }


    }
    unobserve(target: Element) {
        for(let i = 0; this.targets.length; i++) {
            let tempTarget = this.targets[i];
            if(tempTarget == target) {
                let position = AvResizeObserver.resizeObserverClassByObject[target['sourceIndex']].indexOf(this);
                if(position != -1) {
                    AvResizeObserver.resizeObserverClassByObject[target['sourceIndex']].splice(position, 1);
                }
                if(AvResizeObserver.resizeObserverClassByObject[target['sourceIndex']].length == 0) {
                    delete AvResizeObserver.resizeObserverClassByObject[target['sourceIndex']];
                }
                AvResizeObserver.getUniqueInstance().unobserve(target);
                this.targets.splice(i, 1);
                return;
            }
        }
    }
    disconnect() {
        for(let i = 0; this.targets.length; i++) {
            this.unobserve(this.targets[i]);
        }
    }
    entryChanged(entry) {
        let index = entry.target.sourceIndex;
        this.entriesChangedEvent[index] = entry;
    }
    triggerCb() {
        if (!this.willTrigger) {
            this.willTrigger = true;
            this._triggerCb();
        }
    }
    _triggerCb() {
        let now = window.performance.now();
        let elapsed = now - this.nextFrame;
        if (this.fpsInterval != -1 && elapsed <= this.fpsInterval) {
            requestAnimationFrame(() => {
                this._triggerCb();
            });
            return;
        }
        this.nextFrame = now - (elapsed % this.fpsInterval);
        let changed = Object.values(this.entriesChangedEvent);
        this.entriesChangedEvent = {};
        this.willTrigger = false;
        setTimeout(() => {
            this.callback(changed);
        }, 0)
    }
}