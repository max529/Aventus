declare global {
    type Constructor<T> = Function & { prototype: T; };
    /**
     * Add an attribute inside on your component
     */
    function Attribute();
    /**
     * Add an attribute inside on your component with changes analyze
     */
    function Property();
    /**
     * Add an attribute inside on your component with changes analyze
     */
    function Property<T>(onChange: (component: T) => void);
    /**
     * Add a property inside a watcher to be notify of changing
     */
    function Watch();
    /**
     * Add a property inside a watcher to be notify of changing
     */
    function Watch<T>(onChange: (component: T, action: Aventus.WatchAction, path: string, value: any) => void);
    /**
     * Signal that this variable is a link to your shadowroot
     */
    function ViewElement(config?: ViewElementConfig);

    function StateActive(stateName: string, manager: typeof Aventus.StateManager): (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<((state: State, slugs: StateSlug) => void)>) => void;
    function DefaultStateActive(managerName?: string);
    function StateInactive(stateName: string, managerName?: string): (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<((state: State, nextState: State, slugs: StateSlug) => void)>) => void;
    function DefaultStateInactive(managerName?: string);
    function StateChange(stateName: string, managerName?: string): (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<((state: State, nextState: State, slugs: StateSlug) => boolean | Promise<boolean>)>) => void;

    /**
     * Clear parent view and use your
     */
    function OverrideView(config?: OverrideViewConfig): (<T extends Constructor<Aventus.WebComponent>> (constructor: T) => T);
    /**
     * use a custom TagName
     */
    function TagName(name: string): (<T extends Constructor<Aventus.WebComponent>> (constructor: T) => T);
    /**
     * Add debbuger action function for your component
     */
    function Debugger(config: DebuggerConfig): (constructor: Function) => void;
}