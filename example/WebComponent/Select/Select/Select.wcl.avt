import { AvOption } from "../option/option.wcl.avt";

@Debugger({
    writeCompiled: true
})
export class AvSelect extends AvFormElement<string> implements DefaultComponent {

    //#region static

    //#endregion


    //#region props

    @attribute()
    label: string;
    //#endregion


    //#region variables
    @mutable()
    value_display: string = "";

    hider: AvHideable;
    options: HTMLDivElement;
    baseEl: HTMLDivElement;
    
    //#endregion


    //#region states

    //#endregion


    //#region constructor
    constructor() {
        super();
       
    }
    //#endregion


    //#region methods
    getDefaultValue(): string {
        return "";
    }
    private selectValueText(): void {
        for(var i = 0; i < this.children.length; i++) {
            if(this.children[i] instanceof AvOption) {
                let optionEl = this.children[i] as AvOption;
                if(this.value == optionEl.value) {
                    this.value_display = this.children[i].innerHTML;
                    return;
                }
            }
        }
        this.value_display = '';
    }
    private openOptions(): void {
        this.options.innerHTML = '';
        var list = this.children;
        for(var i = 0; i < list.length; i++) {
            if(list[i] instanceof AvOption) {
                let optionEl = list[i] as AvOption;
                if(optionEl.value == this.value) {
                    optionEl.selected = true;
                }
                else {
                    optionEl.selected = false;
                }
                var clone = optionEl.cloneNode(true);
                clone.addEventListener('click', (e) => {
                    this.selectOption(e.currentTarget);
                });
                this.options.appendChild(clone);
            }
        }

        this.hider.show();

        var offset = this.baseEl.getPositionOnScreen();
        this.options.style.left = offset.x + 'px';
        this.options.style.top = offset.y + this.baseEl.offsetHeight + 2 + 'px';
        this.options.style.minWidth = this.offsetWidth + 'px';
    }
    selectOption(opt) {
        this.value = opt.value;
        this.value_display = opt.innerHTML;
        this.onValueChanged();
        this.hider.hide(true);
    }

    protected override postCreation(): void {
        let valueAttr = this.getAttribute("value");
        if(valueAttr) {
            this.value = valueAttr;
            this.removeAttribute("value");
        }
        var list = this.children;
        for(var i = 0; i < list.length; i++) {
            if(!(list[i] instanceof AvOption)) {
                list[i].remove();
                i--;
            }
            else {
                let optionEl = list[i] as AvOption;
                if(optionEl.selected) {
                    this.value = optionEl.value;

                }
            }
        }

        this.addEventListener('click', () => {
            this.openOptions();
        });

        let form = this.findParentByTag<AvForm>("av-form");
        if(form) {
            form.subsribe(this);
        }
        setTimeout(() => {
            this.selectValueText();
        });
    }
	//#endregion
}